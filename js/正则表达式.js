// regualr expression
// RegExp 对象

// https://www.w3school.com.cn/jsref/jsref_obj_regexp.asp
// https://segmentfault.com/a/1190000009324194
// 这两个方式结果一样
var patt = /e/;
patt.test("The best things in life are free!");

/e/.test("The best things in life are free!")


var qq = "066336";
// （1~9的数字，1个）；2.（0~9的数字，4~14个）
//  /[1-9]{1}[0-9]{4,14}/这些都不对
var reg = /^[1-9][0-9]{4,14}$/; // 用^和$指定起止位置

if (reg.test(qq)) {
    console.log("QQ合法");
} else {
    console.log("QQ不合法");
}

//第一种“/正则表达式/”
var reg1 = /hello \w{3,12}/g;
//第二种new RegExp('正则表达式')。由于字符串转义问题，"\\"代表"\"
var reg2 = new RegExp("hello \\w{3,12}", 'g');


// 0555-6581752、021-86128488

//第一步：拆成（取值范围+量词）这样的组合
//这里会拆成两个大组合：

//1、（数字0，1个）+（数字0~9，3个）+("-"，1个)+（数字1~9，1个）+（数0~9，6个）
//2、（数字0，1个）+（数字0~9，2个）+("-"，1个)+（数字1~9，1个）+（数0~9，7个）
//第二步：根据正则表达式规则翻译（取值范围+量词）
//1、([0-0],{1})+([0-9],{3})+"-"+([1,9],{1})+([0,9],{6})
//2、([0-0],{1})+([0-9],{2})+"-"+([1,9],{1})+([0,9],{7})
//第三步：将翻译好的（取值范围+量词）组合进行拼接
//这里我们先拼接一个大组合，然后再将大组合拼接起来

//1、0[0-9]{3}-[1-9][0-9]{6}
//2、0[0-9]{2}-[1-9][0-9]{7}
//最后拼接为：

var phone = /(^0[0-9]{3}-[1-9][0-9]{6}$)|(^0[0-9]{2}-[1-9][0-9]{7}$)/;

console.log(/[\u0000-\u00ff]{8}/.test('１２３４５６７８'));